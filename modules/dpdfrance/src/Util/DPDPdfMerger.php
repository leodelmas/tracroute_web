<?php
/**
 * Copyright 2023 DPD France S.A.S.
 *
 * This file is a part of dpdfrance module for Prestashop.
 *
 * NOTICE OF LICENSE
 *
 * This file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for
 * your needs please contact us at support.ecommerce@dpd.fr.
 *
 * @author    DPD France S.A.S. <support.ecommerce@dpd.fr>
 * @copyright 2023 DPD France S.A.S.
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

namespace PrestaShop\Module\DPDFrance\Util;

use Exception;
use setasign\Fpdi\PdfParser\CrossReference\CrossReferenceException;
use setasign\Fpdi\PdfParser\Filter\FilterException;
use setasign\Fpdi\PdfParser\PdfParserException;
use setasign\Fpdi\PdfParser\Type\PdfTypeException;
use setasign\Fpdi\PdfReader\PdfReaderException;
use setasign\Fpdi\Tfpdf\Fpdi;

/**
 * PDFMerger réduit au plus simple de nos besoins.
 *
 * Utilise le package setasign\Fpdi avec Tfpdf (prise en compte de l'UTF8 au cas où)
 */
class DPDPdfMerger
{
    private $pdfFiles = [];

    /**
     * Ajoute un fichier à la liste des PDF
     * @param string $filePath Chemin absolu vers le fichier PDF à ajouter à la liste
     * @return $this
     * @throws Exception
     */
    public function addPdf(string $filePath)
    {
        if (file_exists($filePath)) {
            $this->pdfFiles[] = $filePath;
        } else {
            throw new Exception("Le fichier '$filePath' est introuvable.");
        }

        return $this;
    }

    /**
     * Merge les PDF en un seul.
     * @param string $outputMode Façon dont on veut rendre le PDF ('download', 'file', 'string', 'browser')
     * @param string $outputFileName Chemin absolu si on veut l'enregistrer, nom de fichier sinon
     * @return string|bool
     * @throws CrossReferenceException
     * @throws FilterException
     * @throws PdfParserException
     * @throws PdfTypeException
     * @throws PdfReaderException
     */
    public function merge(string $outputMode = 'browser', string $outputFileName = 'file.pdf')
    {
        if (empty($this->pdfFiles)) {
            throw new Exception('Aucun PDF à merger.');
        }

        $fpdi = new Fpdi();

        // On merge les fichiers
        foreach ($this->pdfFiles as $pdfFile) {
            $count = $fpdi->setSourceFile($pdfFile);

            for ($i = 1; $i <= $count; $i++) {
                $template = $fpdi->importPage($i);
                $size = $fpdi->getTemplateSize($template);
                $fileorientation = ($size['width'] > $size['height']) ? 'L' : 'P';
                $fpdi->AddPage($fileorientation, [$size['width'], $size['height']]);
                $fpdi->useTemplate($template);
            }
        }

        // On rend le PDF comme demandé
        $fpdiOutputMode = $this->getFpdiOutputMode($outputMode);

        if ($fpdiOutputMode == 'S') {
            return $fpdi->Output($outputFileName, 'S');
        } elseif ($fpdi->Output($outputFileName, $fpdiOutputMode) == '') {
            return true;
        }

        throw new Exception("La sortie en mode '$outputMode' n'a pas fonctionné.");
    }

    /**
     * On traduit le mode de sortie comme l'attend FPDI
     * @param string $outputMode
     * @return string
     */
    private function getFpdiOutputMode(string $outputMode)
    {
        switch (strtolower($outputMode)) {
            case 'download':
                return 'D';
            case 'file':
                return 'F';
            case 'string':
                return 'S';
            case 'browser':
            default:
                return 'I';
        }
    }
}
