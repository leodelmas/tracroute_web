<?php
/**
 * Copyright 2023 DPD France S.A.S.
 *
 * This file is a part of dpdfrance module for Prestashop.
 *
 * NOTICE OF LICENSE
 *
 * This file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for
 * your needs please contact us at support.ecommerce@dpd.fr.
 *
 * @author    DPD France S.A.S. <support.ecommerce@dpd.fr>
 * @copyright 2023 DPD France S.A.S.
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */

namespace PrestaShop\Module\DPDFrance\ExternalContentProvider\Transcriptor;

use InvalidParameterException;
use StdClass;

/**
 * Transcripteur de StdClass vers des objets de classes désirées
 * TODO Peut-on prévoir les cas List[] (Item|Item[]) ?
 */
final class Transcriptor
{
    /**
     * @param string $transcriptionClassName
     * @param stdClass $stdObjectToTranscript
     * @param array|null $subTranscriptionClasses Les sous-classes à transcrire.
     *      En clé : la clé du StdClass
     *      En valeur : le nom complet de la classe dans laquelle on veut la transcrire (avec son namespace)
     * @return false|mixed Object of class "$transcriptionClassName"
     */
    public static function convertTo(
        string $transcriptionClassName,
        stdClass $stdObjectToTranscript,
        array $subTranscriptionClasses = []
    ) {
        if (!class_exists($transcriptionClassName)) {
            throw new InvalidParameterException("Class '$transcriptionClassName' does not exist.");
        }

        if (!$stdObjectToTranscript instanceof StdClass) {
            throw new InvalidParameterException('$stdObjectToTranscript *must* be an object of class StdClass.');
        }

        $serializedStdClass = serialize($stdObjectToTranscript);

        if (!empty($subTranscriptionClasses)) {
            foreach ($subTranscriptionClasses as $key => $subClassName) {
                if (!class_exists($subClassName)) {
                    throw new InvalidParameterException("Subclass '$subClassName' does not exist.");
                }

                $serializedStdClass = str_replace(
                    's:' . strlen($key) . ':"' . $key . '";O:8:"stdClass":',
                    's:' . strlen($key) . ':"' . $key . '";O:' . strlen($subClassName) . ':"' . $subClassName . '":',
                    $serializedStdClass
                );
            }
        }

        // Classe parente
        $serializedStdClass = sprintf(
            'O:%d:"%s"%s',
            strlen($transcriptionClassName),
            $transcriptionClassName,
            strstr(strstr($serializedStdClass, '"'), ':')
        );

        return unserialize($serializedStdClass);
    }
}
