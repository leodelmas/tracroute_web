<?php
/**
 * Copyright 2023 DPD France S.A.S.
 *
 * This file is a part of dpdfrance module for Prestashop.
 *
 * NOTICE OF LICENSE
 *
 * This file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE.md.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 *
 * DISCLAIMER
 *
 * Do not edit this file if you wish to upgrade this module to newer
 * versions in the future. If you wish to customize this module for
 * your needs please contact us at support.ecommerce@dpd.fr.
 *
 * @author    DPD France S.A.S. <support.ecommerce@dpd.fr>
 * @copyright 2023 DPD France S.A.S.
 * @license   http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
if (!defined('_PS_VERSION_')) {
    exit;
}

use PrestaShop\Module\DPDFrance\ExternalContentProvider\EprintProvider;
use PrestaShop\Module\DPDFrance\ExternalContentProvider\Transcription\Webtrace\clsTrace;
use PrestaShop\Module\DPDFrance\ExternalContentProvider\Transcription\Webtrace\Traces;
use PrestaShop\Module\DPDFrance\ExternalContentProvider\WebtraceProvider;
use PrestaShop\Module\DPDFrance\Util\DPDConfig;
use PrestaShop\Module\DPDFrance\Util\DPDPdfMerger;
use PrestaShop\Module\DPDFrance\Util\DPDTools;

class AdminDPDFranceReturnController extends ModuleAdminController
{
    public $identifier = 'DPDFrance';
    public $pdf;
    private $dirPdf;

    public function __construct()
    {
        parent::__construct();

        $this->name = 'DPDFranceReturn';
        $this->bootstrap = true;
        $this->display = 'view';
        $this->meta_title = 'Gestion des retours';
        $this->dirPdf = DPDFRANCE_PDF_FOLDER_PATH;

        if (!$this->module->active) {
            Tools::redirectAdmin($this->context->link->getAdminLink('AdminHome'));
        }
    }

    /**
     * {@inheritdoc}
     * @return void
     */
    public function initToolBarTitle()
    {
        // TODO #44900 Voir tous les $this->l du prÃ©sent Controller
        $this->toolbar_title[] = $this->l('Orders');
        $this->toolbar_title[] = $this->l('DPD return management');
    }

    /**
     * {@inheritdoc}
     * @param $isNewTheme
     */
    public function setMedia($isNewTheme = false)
    {
        parent::setMedia($isNewTheme);

        $pathUri = $this->module->getPathUri();

        $css = [
            $pathUri . 'views/js/admin/jquery/plugins/fancybox/jquery.fancybox.css',
            $pathUri . 'views/css/admin/AdminDPDFrance.css',
        ];

        if (DPDFRANCE_DEV_MODE === true) {
            $css[] = $pathUri . 'views/css/dev.css';
        }

        $this->addCSS($css);
        $this->addJS([
            $pathUri . 'views/js/admin/jquery/plugins/marquee/jquery.marquee.min.js',
            $pathUri . 'views/js/admin/admin_france_pdf_return.js',
        ]);
    }

    public function renderView()
    {
        $this->fields_form[]['form'] = [];
        $helper = $this->buildHelper();
        $msg = '';

        // Ajax call - Export label
        if (Tools::getIsset('exportLabel')) {
            file_put_contents(DPDFRANCE_MODULE_PATH . '/session.txt', 'start');
            if (Tools::getIsset('checkbox')) {
                $colis = Tools::getValue('checkbox');
                $zplPathReturn = [];
                if (is_string($colis)) {
                    $colis = explode(',', $colis);
                }
                if (!empty($colis)) {
                    $this->pdfMerger = new DPDPdfMerger();
                    foreach ($colis as $colisId) {
                        if (DPDConfig::get('DPDFRANCE_FORMAT_MOD') === 'pdf') {
                            $hasCreate[] = $this->generatedLabelReturn($this->getDpdOrder($colisId));
                        } else {
                            $hasCreate[] = $this->generatedLabelReturn($this->getDpdOrder($colisId), $zplPathReturn);
                            $zplPathReturn = array_unique($zplPathReturn);
                        }
                    }

                    if (DPDConfig::get('DPDFRANCE_FORMAT_MOD') !== 'pdf') {
                        if (count($zplPathReturn) > 0) {
                            if (DPDConfig::get('DPDFRANCE_FORMAT_CONNECT') === 'ip') {
                                if (($conn = fsockopen(DPDConfig::get('DPDFRANCE_PRINTER_IP'), DPDConfig::get('DPDFRANCE_PRINTER_PORT'), $errno, $errstr)) === false) {
                                    echo 'Connection Failed' . $errno . $errstr;
                                }
                                foreach ($zplPathReturn as $path) {
                                    fputs($conn, Tools::file_get_contents($path), Tools::strlen(Tools::file_get_contents($path)));
                                }
                                fclose($conn);
                                foreach ($zplPathReturn as $path) {
                                    unlink($path);
                                }
                                file_put_contents(DPDFRANCE_MODULE_PATH . '/session.txt', 'finish');
                                DPDTools::htmlAutoCloseWindow();
                            }
                        } else {
                            file_put_contents(DPDFRANCE_MODULE_PATH . '/session.txt', 'finish');
                            DPDTools::htmlAutoCloseWindow();
                        }
                    }
                    file_put_contents(DPDFRANCE_MODULE_PATH . '/session.txt', 'finish');

                    if (DPDConfig::get('DPDFRANCE_FORMAT_MOD') === 'pdf') {
                        $this->pdfMerger->merge('browser', 'label.pdf');
                        foreach (scandir($this->dirPdf) as $file) {
                            $file = $this->dirPdf . '/' . $file;
                            if (is_file($file) && pathinfo($file, PATHINFO_EXTENSION) === 'pdf') {
                                unlink($file);
                            }
                        }
                    } else {
                        file_put_contents(DPDFRANCE_MODULE_PATH . '/session.txt', 'finish');
                        DPDTools::htmlAutoCloseWindow();
                    }
                }
            }
        }

        // Display section
        // Error message if shipper info is missing
        if (!DPDConfig::isModuleEnabled()) {
            echo '<div class="warnmsg">' . $this->l('Warning! Your DPD Depot code and contract number are missing. You must configure the DPD module in order to use the export and tracking features.') . '</div>';
            exit;
        }
        // Calls function to get orders
        $order_info = [];
        $orderStatusList = [];
        $statuses = OrderState::getOrderStates((int)Context::getContext()->language->id);
        foreach ($statuses as $status) {
            $orderStatusList[$status['id_order_state']] = $status['name'];
        }
        $colis = $this->getColis();

        if (!empty($colis)) {
            foreach ($colis as $dpdId) {
                $order = new Order($dpdId['id_order']);
                $address = new Address($order->id_address_delivery);
                $service = DPDTools::getService($order, Context::getContext()->language->id);
                $code_pays_dest = DPDTools::getIsoCodebyIdCountry($address->id_country);

                $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos($service, (int)$order->id_shop);

                switch ($service) {
                    case 'HDP_PRE':
                    case 'PRE':
                        $type = $code_pays_dest !== 'F' ?
                            'Predict Export<img src="../modules/dpdfrance/views/img/admin/service_predict.png" title="Predict Export" alt="predict export"/>' :
                            'Predict<img src="../modules/dpdfrance/views/img/admin/service_predict.png" title="Predict" alt="predict"/>';
                        $address_delivery = '<a class="popup" href="'
                            . DPDTools::PREFIX_GOOGLE_URL
                            . str_replace(' ', '+', $address->address1)
                            . ',' . str_replace(' ', '+', $address->postcode)
                            . '+' . str_replace(' ', '+', $address->city)
                            . '&output=embed" target="_blank">'
                            . ($address->company ? $address->company . '<br/>' : '')
                            . $address->address1 . '<br/>'
                            . $address->postcode . ' ' . $address->city
                            . '</a>';
                        break;
                    case 'REL':
                        $type = 'Relais<img src="../modules/dpdfrance/views/img/admin/service_relais.png" title="Relais" alt="relais"/>';
                        $relay_id = '';
                        preg_match('/P\d{5}/i', $address->company, $matches, PREG_OFFSET_CAPTURE);
                        if ($matches) {
                            $relay_id = $matches[0][0];
                        }
                        $address_delivery = '<a class="popup" href="'
                            . DPDTools::PREFIX_RELAIS_URL . $relay_id . '" target="_blank">'
                            . $address->company . '<br/>'
                            . $address->postcode . ' ' . $address->city
                            . '</a>';
                        break;
                    case 'HDP_CLA':
                    case 'CLA':
                        $type = $code_pays_dest !== 'F' ?
                            'Classic Export<img src="../modules/dpdfrance/views/img/admin/service_world.png" title="Classic Export" alt="classic export"/>' :
                            'Classic<img src="../modules/dpdfrance/views/img/admin/service_dom.png" title="Classic" alt="classic"/>';
                        $address_delivery = '<a class="popup" href="'
                            . DPDTools::PREFIX_GOOGLE_URL
                            . str_replace(' ', '+', $address->address1)
                            . ',' . str_replace(' ', '+', $address->postcode)
                            . '+' . str_replace(' ', '+', $address->city)
                            . '&output=embed" target="_blank">'
                            . ($address->company ? $address->company . '<br/>' : '')
                            . $address->address1 . '<br/>'
                            . $address->postcode . ' ' . $address->city
                            . '</a>';
                        break;
                }

                $current_state_id = $order->current_state;

                switch ((int)$current_state_id) {
                    case DPDConfig::get('DPDFRANCE_ETAPE_LIVRE', null, null, (int)$order->id_shop):
                    case DPDConfig::get('DPDFRANCE_ETAPE_EXPEDIEE', null, null, (int)$order->id_shop):
                        $dernierstatutcolis = '<img src="../modules/dpdfrance/views/img/admin/tracking.png" title="Trace du colis"/>';
                        break;
                    default:
                        $dernierstatutcolis = '';
                        break;
                }

                $order_info[] = [
                    'id'                   => $dpdId['id_order_dpd'],
                    'id_order'             => $dpdId['id_order'],
                    'reference'            => $order->reference,
                    'type'                 => $type,
                    'date'                 => date('d/m/Y H:i:s', strtotime($order->date_add)),
                    'nom'                  => $address->lastname . ' ' . $address->firstname,
                    'address'              => $address_delivery,
                    'shipper_code'         => $serviceLivraisonInfos['shipper_code'],
                    'depot_code'           => sprintf('%03d', $serviceLivraisonInfos['depot_code']),
                    'dernier_statut_colis' => $dernierstatutcolis,
                    'poids'                => $order->getTotalWeight(),
                    'labelprint'           => (!is_null($dpdId['return_print']) ? $dpdId['return_print'] : false),
                    'weightunit'           => Configuration::get('PS_WEIGHT_UNIT', null, null, (int)$order->id_shop),
                    'arrived'              => $dpdId['arrived'],
                ];
            }
        } else {
            $order_info['error'] = true;
        }

        // Assign smarty variables
        $this->context->smarty->assign(
            [
                'msg'                     => $msg,
                'stream'                  => DPDTools::getDPDRssInfos(),
                'token'                   => $this->token,
                'order_info'              => $order_info,
                'dpdfrance_retour_option' => DPDConfig::get('DPDFRANCE_RETOUR_OPTION', null, null, (int)Context::getContext()->shop->id),
                'dpdfrance_mode_format'   => DPDConfig::get('DPDFRANCE_FORMAT_MOD', null, null, (int)Context::getContext()->shop->id),
                'dpdfrance_base_dir'      => __PS_BASE_URI__ . 'modules/' . Tools::strtolower($this->identifier),
                'dpdfrance_token'         => Tools::hash('dpdfrance/ajax'),
            ]
        );

        if (DPDFRANCE_DEV_MODE) {
            $this->context->smarty->assign([
                'dpdfrance_dev_badge' => DPDTools::getHtmlDevBadge(),
            ]);
        }

        return $helper->generateForm($this->fields_form);
    }

    protected function buildHelper()
    {
        $helper = new HelperForm();
        $helper->base_folder = 'helpers/form/';
        $helper->base_tpl = 'form_return.tpl';
        $helper->module = $this->module;
        $helper->override_folder = 'dpdfrance/';
        $helper->identifier = $this->identifier;
        $helper->token = Tools::getAdminTokenLite('Admin' . $this->name);
        $helper->languages = $this->_languages;
        $helper->currentIndex = $this->context->link->getAdminLink('Admin' . $this->name);
        $helper->default_form_language = $this->default_form_language;
        $helper->allow_employee_form_lang = $this->allow_employee_form_lang;
        $helper->toolbar_scroll = true;
        $helper->toolbar_btn = $this->initToolbar();
        $helper->background_color = 'red';

        return $helper;
    }

    /**
     * Create label return
     * @param array $dpdOrder
     * @param array $zplPathReturn
     * @return bool
     * @throws SoapFault
     */
    public function generatedLabelReturn($dpdOrder, &$zplPathReturn = [])
    {
        $eprintUser = DPDConfig::get('DPDFRANCE_API_LOGIN');
        $eprintPassword = DPDConfig::get('DPDFRANCE_API_PASSWORD');

        if (
            EprintProvider::initSoapClient($eprintUser, $eprintPassword, DPDFRANCE_DEV_USE_WS_TEST) === false
            && DPDConfig::get('DPDFRANCE_FORMAT_MOD') === 'pdf'
        ) {
            return false;
        }

        $print_format = DPDConfig::get('DPDFRANCE_FORMAT_PRINT');
        $order = new Order($dpdOrder['id_order']);
        $service = DPDTools::getService($order, Context::getContext()->language->id);

        $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos($service, (int)$order->id_shop);

        $getRetourLabel = [
            'countrycode'     => 250,
            'centernumber'    => $serviceLivraisonInfos['depot_code'],
            'customer_number' => $serviceLivraisonInfos['shipper_code'],
            'parcelnumber'    => $dpdOrder['id_retour_order_dpd'],
        ];

        if (DPDConfig::get('DPDFRANCE_FORMAT_MOD') != 'pdf') {
            $getRetourLabel['labelType'] = [
                'type' => Tools::strtoupper(DPDConfig::get('DPDFRANCE_FORMAT_MOD')),
            ];
        }

        //__Override by new DATA
        // ? Add receiveradress countryPrefix by country ? Is it always FR ?
        if (!is_null($dpdOrder['override_return_street']) && !is_null($dpdOrder['override_return_zip']) && !is_null($dpdOrder['override_return_city']) && !is_null($dpdOrder['override_return_phone'])) {
            $getRetourLabel['receiveraddress'] = [
                'name'          => DPDConfig::get('DPDFRANCE_NOM_EXP'),
                'countryPrefix' => 'FR',
                'zipCode'       => $dpdOrder['override_return_zip'],
                'city'          => $dpdOrder['override_return_city'],
                'street'        => $dpdOrder['override_return_street'],
                'phoneNumber'   => $dpdOrder['override_return_phone'],
            ];
        }
        if ($print_format === 'a6') {
            $getRetourLabel['labelType'] = [
                'type' => 'PDF_A6',
            ];
        } elseif ($print_format === 'a4') {
            $getRetourLabel['labelType'] = [
                'type' => 'PDF',
            ];
        }

        try {
            $labels = EprintProvider::getRetourLabel($getRetourLabel, DPDFRANCE_EPRINT_BC);
        } catch (Exception $e) {
            return false;
        }

        Db::getInstance()->update(
            'dpdfrance_order',
            [
                'return_print' => 1,
            ],
            'id_order = ' . (int)$dpdOrder['id_order']
        );

        if (DPDConfig::get('DPDFRANCE_FORMAT_MOD') === 'pdf') {
            if (empty($this->pdfMerger)) {
                $this->pdfMerger = new DPDPdfMerger();
            }
            foreach ($labels as $labelKey => $label) {
                $pdfPath = $this->dirPdf . "/Label_" . md5(preg_replace('/[^a-zA-Z0-9\-_]/i', '', $dpdOrder['id_retour_order_dpd'])) . '_' . (int)preg_replace('/[^a-zA-Z0-9\-_]/i', '', $labelKey) . ".pdf";
                file_put_contents($pdfPath, $label->label);
                $this->pdfMerger->addPdf($pdfPath);
            }

            return true;
        } else {
            foreach ($labels as $labelKey => $label) {
                $path = $this->dirPdf . '/Label_' . md5(preg_replace('/[^a-zA-Z0-9\-_]/i', '', $dpdOrder['id_retour_order_dpd'])) . '_' . (int)preg_replace('/[^a-zA-Z0-9\-_]/i', '', $labelKey) . '.' . preg_replace('/[^a-zA-Z0-9\-_]/i', '', Configuration::get('DPDFRANCE_FORMAT_MOD'));
                file_put_contents($path, $label->label);
                $zplPathReturn[] = $path;
            }

            return true;
        }
    }

    /**
     * Get colis delivered whit return accept
     * @return array
     * @throws PrestaShopDatabaseException
     * @throws PrestaShopException
     * @throws SoapFault
     */
    public function getColis()
    {
        $listColisValid = [];
        $sql = new DbQuery();
        $sql->select('*')
            ->from('dpdfrance_order', 'O')
            ->where('id_order_dpd <> 0')
            ->orderBy('id_order DESC');
        $listColis = Db::getInstance()->executeS($sql);

        // Initialisation Webtrace
        $webtraceUser = DPDConfig::get('DPDFRANCE_WEBTRACE_LOGIN');
        $webtracePassword = DPDConfig::get('DPDFRANCE_WEBTRACE_PASSWORD');
        WebtraceProvider::initSoapClient($webtraceUser, $webtracePassword, DPDFRANCE_DEV_USE_WS_TEST);

        // Initialisation Eprint
        $eprintUser = DPDConfig::get('DPDFRANCE_API_LOGIN');
        $eprintPassword = DPDConfig::get('DPDFRANCE_API_PASSWORD');
        EprintProvider::initSoapClient($eprintUser, $eprintPassword, DPDFRANCE_DEV_USE_WS_TEST);

        foreach ($listColis as $colis) {
            $order = new Order($colis['id_order']);
            $service = DPDTools::getService($order, Context::getContext()->language->id);

            $serviceLivraisonInfos = DPDConfig::getServiceLivraisonInfos($service, (int)$order->id_shop);

            $shipmentTraceParams = [
                'Customer'       => [
                    'centernumber' => $serviceLivraisonInfos['depot_code'],
                    'number'       => $serviceLivraisonInfos['shipper_code'],
                    'countrycode'  => '250',
                ],
                'Language'       => 'F',
                'ShipmentNumber' => $colis['id_shipment_number_dpd'],
                'GetImages'      => false,
            ];

            try {
                $shipmentTracesResult = WebtraceProvider::getShipmentTrace($shipmentTraceParams);
            } catch (Exception $e) {
                //exception on getting the shipment trace : webservice problems / no data found...
                continue;
            }

            // If ShipmentTrace has multiple traces then we use the first one because it is the return parcel and not the original parcel.
            // We need the ShipmentNumber_Retour which is defined in the original parcel trace
            $shipmentTraces = $shipmentTracesResult[0]->Traces;
            $shipmentNumberRetour = $shipmentTracesResult[0]->ShipmentNumber_Retour;
            $shipmentReturn = [
                'Customer'       => [
                    'centernumber' => $serviceLivraisonInfos['depot_code'],
                    'number'       => $serviceLivraisonInfos['shipper_code'],
                    'countrycode'  => '250',
                ],
                'Language'       => 'F',
                'ShipmentNumber' => $shipmentNumberRetour,
                'GetImages'      => false,
            ];

            try {
                $returnShipmentTraces = WebtraceProvider::getShipmentTrace($shipmentReturn);
            } catch (Exception $exception) {
                // if no ShipmentNumber_Retour for this order
                continue;
            }

            // If ShipmentTrace contains multiple traces then we use the first one because it is the return parcel and not the original parcel.
            $returnTraces = $returnShipmentTraces[0]->Traces;

            $retourShipmentData = [
                'countrycode'           => 250,
                'centernumber'          => $serviceLivraisonInfos['depot_code'],
                'customer_number'       => $serviceLivraisonInfos['shipper_code'],
                'original_parcelnumber' => $colis['id_order_dpd'],
            ];

            try {
                $retourShipmentData = EprintProvider::getRetourShipmentData($retourShipmentData, DPDFRANCE_EPRINT_BC);
            } catch (Exception $exception) {
                // if no return for this order
                continue;
            }

            if ($retourShipmentData->services->expireOffset > 0) {
                Db::getInstance()->update(
                    'dpdfrance_order',
                    [
                        'id_retour_order_dpd' => pSQL($retourShipmentData->shipmentRetour->BarcodeId),
                    ],
                    'id_order_dpd = ' . (int)$colis['id_order_dpd']
                );
                $show = true;
                $colis['arrived'] = false;
                if ($shipmentTraces instanceof Traces) {
                    $clsTraces = $shipmentTraces->clsTrace;
                    if (!is_array($clsTraces)) {
                        $clsTraces = [$clsTraces];
                    }

                    foreach ($clsTraces as $clsTrace) {
                        if ($clsTrace instanceof clsTrace && in_array($clsTrace->StatusNumber,  ['40' , '400' , '271'])) {
                            $colis['arrived'] = true;
                            break;
                        }
                    }
                }

                if ($returnTraces instanceof Traces) {
                    $returnClsTraces = $returnTraces->clsTrace;
                    if (!is_array($returnClsTraces)) {
                        $returnClsTraces = [$returnClsTraces];
                    }

                    foreach ($returnClsTraces as $returnClsTrace) {
                        if ($returnClsTrace instanceof clsTrace && in_array($returnClsTrace->StatusNumber,  ['40' , '400' , '271'])) {
                            $show = false;
                        }
                    }
                }

                if ($show) {
                    $listColisValid[] = $colis;
                }
            }
        }

        return $listColisValid;
    }

    /**
     * @param $colis
     * @return string list order dpd
     * @throws PrestaShopDatabaseException
     */
    public function getDpdOrder($colis)
    {
        $sql = new DbQuery();
        $sql->select('*')
            ->from('dpdfrance_order')
            ->where('id_order_dpd = ' . (int)$colis);
        $result = Db::getInstance()->executeS($sql);
        if (!empty($result[0]['id_order_dpd']) || (isset($result[0]['id_order_dpd']) && $result[0]['id_order_dpd'] === '0')) {
            return $result[0];
        }

        return '';
    }
}
